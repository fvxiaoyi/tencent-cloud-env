name: 'Terraform'

on:
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.TOKEN }}
      TF_IN_AUTOMATION: true
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Import GPG
      uses: crazy-max/ghaction-import-gpg@v5.2.0
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}

    - name: Write kube config
      run: |
        echo "$MY_SECRET" >> k3s.yaml
      shell: bash
      env:
        MY_SECRET: ${{secrets.KUBE_CONFIG}}

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      run: terraform plan -out workspace.plan

    - name: Output plan
      run: terraform show -no-color -json workspace.plan > tfplan.json

    - name: PR Comment
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs')
          let planJson = fs.readFileSync('tfplan.json', 'utf8')
          planJson = planJson.replace(/"content"\s?:\s?"(.*?)(?<!\\)"/g, '"content": "sensitive"')
          planJson = planJson.replace(/"yaml_body"\s?:\s?"(.*?)(?<!\\)"/g, '"yaml_body": "sensitive"')
          planJson = planJson.replace(/"yaml_body_parsed"\s?:\s?"(.*?)(?<!\\)"/g, '"yaml_body_parsed": "sensitive"')
          planJson = planJson.replace(/"values":\{"content": "(.*?)","documents":\[(.*?)\],"id":"(.*?)","manifests":\{(.*?)\}}/g, '"values": "sensitive"')
          
          const endStr = ',"prior_state"'
          let match = planJson.match(/"resource_changes":(.*?)(,"prior_state")/)
          let matched = match[0]
          let result = "{" + matched.substr(0, matched.length - endStr.length) + "}"
          const resource_changes = JSON.parse(result).resource_changes
          if(Array.isArray(resource_changes) && resource_changes.length > 0) {
                const resources_to_create   = []
                , resources_to_update   = []
                , resources_to_delete   = []
                , resources_to_replace  = []
                , resources_unchanged   = [];
    
                // for each resource changes
                for(const resource of resource_changes) {
                  const change = resource.change;
                  const address = resource.address;

                  switch(change.actions[0]) {
                      default:
                          break;
                      case "no-op":
                          resources_unchanged.push(address);
                          break;
                      case "create":
                          resources_to_create.push(address);
                          break;
                      case "delete":
                          if(change.actions.length > 1) {
                              resources_to_replace.push(address);
                          } else {
                              resources_to_delete.push(address);
                          }
                          break;
                      case "update":
                          resources_to_update.push(address);
                          break;
                  }
              }
